import org.apache.tools.ant.filters.ReplaceTokens

def isWin=System.getProperty('os.name').toLowerCase().contains('windows')
def isOSX=System.getProperty('os.name').toLowerCase().contains('mac')
def isNix=(System.getProperty('os.name').toLowerCase().contains('nix') || System.getProperty('os.name').toLowerCase().contains('aix') || System.getProperty('os.name').toLowerCase().contains('nux'))

def commandLinePrefix = []
if(isWin){
    commandLinePrefix =["cmd","/c"]
}

/**
 Builds environment
 **/
task("authoringEnvirment"){
    description "Build Crafter environment"

    doLast{
        copy{
            from zipTree(downloadDir + "/apache-tomcat-${tomcatVersion}.zip")
            into "${authEnv}/bin"
        }
        file("${authEnv}/bin/apache-tomcat-${tomcatVersion}").renameTo(file("${authEnv}/bin/apache-tomcat"))

        /** SOLR **/
        copy{
            from zipTree(downloadDir + "/solr-${solrVersion}.zip")
            into "${authEnv}/bin"
        }
        file("${authEnv}/bin/solr-${solrVersion}").renameTo(file("${authEnv}/bin/solr"))

        copy{
            from "./src/search/crafter-search-provider/solr/configsets"
            into "${authEnv}/bin/solr/server/solr/configsets"
        }
        file("${authEnv}/data/indexes").mkdirs()
        file("${authEnv}/data/deployer").mkdirs()
        file("${authEnv}/data/mongodb").mkdirs()
        /** Remove Non util stuff **/
        def webapps = file("${authEnv}/bin/apache-tomcat/webapps/")
        webapps.deleteDir()
        webapps.mkdir()

        copy{
            from "./src/search/crafter-search-server/target/crafter-search.war"
            from "./src/engine/target/ROOT.war"
            from "./src/studio/target/studio.war"
            into "${authEnv}/bin/apache-tomcat/webapps/"
        }

        copy{
            from "./resources/tomcat-config/"
            into "${authEnv}/bin/apache-tomcat/shared/classes/"
            filter(ReplaceTokens, tokens: [TOMCAT_HTTP_PORT: String.valueOf(authTomcatPort),
                                           SOLR_PORT: String.valueOf(solrAuthPort),
                                           SOLR_PORT_D: String.valueOf(solrAuthDebugPort),
                                           DEPLOYER_D_PORT: String.valueOf(deployerAuthDebugPort),
                                           DEPLOYER_PORT: String.valueOf(deployerAuthPort),
                                           MARIADB_PORT: String.valueOf(mariaDbPort),
                                           TOMCAT_DEBUG_PORT:String.valueOf(authTomcatDebug),
                                           MONGODB_PORT:String.valueOf(authMongoDBPort)
            ])
        }
        copy{
            from "./src/deployer/target/crafter-deployer.jar"
            into "${authEnv}/bin/crafter-deployer"
        }
        copy{
            from "./resources/deployer/"
            into "${authEnv}/bin/crafter-deployer"
            filter(ReplaceTokens, tokens: [TOMCAT_HTTP_PORT: String.valueOf(authTomcatPort),
                                           SOLR_PORT: String.valueOf(solrAuthPort),
                                           SOLR_PORT_D: String.valueOf(solrAuthDebugPort),
                                           DEPLOYER_D_PORT: String.valueOf(deployerAuthDebugPort),
                                           DEPLOYER_PORT: String.valueOf(deployerAuthPort),
                                           MARIADB_PORT: String.valueOf(mariaDbPort),
                                           TOMCAT_DEBUG_PORT: String.valueOf(authTomcatDebug),
                                           MONGODB_PORT:String.valueOf(authMongoDBPort)
            ])
        }
        copy {
            from "./src/deployer/README.md"
            into "${authEnv}/bin/crafter-deployer/"
        }
        copy {
            from "./src/studio/README.md"
            into "${authEnv}/bin/apache-tomcat"
        }

        copy {
            from "./resources/LICENSE"
            from "./resources/README.txt"
            into "${authEnv}/"
        }
        copy{
            from "./resources/crafter/"
            into "${authEnv}/bin/"
            filter(ReplaceTokens, tokens: [TOMCAT_HTTP_PORT: String.valueOf(authTomcatPort),
                                           SOLR_PORT: String.valueOf(solrAuthPort),
                                           SOLR_PORT_D: String.valueOf(solrAuthDebugPort),
                                           DEPLOYER_D_PORT: String.valueOf(deployerAuthDebugPort),
                                           DEPLOYER_PORT: String.valueOf(deployerAuthPort),
                                           DEPLOYMENT_DIR: String.valueOf(deploymentAuthDir),
                                           MARIADB_PORT: String.valueOf(mariaDbPort),
                                           TOMCAT_DEBUG_PORT: String.valueOf(authTomcatDebug),
                                           MONGODB_PORT:String.valueOf(authMongoDBPort)

            ])
        }

        if(!isWin){
            exec{
                workingDir "${authEnv}/bin/apache-tomcat/bin/"
                commandLine commandLinePrefix + ["chmod", "+x", "catalina.sh", "configtest.sh", "daemon.sh", "digest.sh", "setclasspath.sh", "shutdown.sh", "startup.sh", "tool-wrapper.sh", "version.sh"]
            }
            exec{
                workingDir "${authEnv}/bin/crafter-deployer/"
                commandLine commandLinePrefix + ["chmod", "+x", "deployer.sh"]
            }
            exec{
                workingDir "${authEnv}/bin"
                commandLine commandLinePrefix + ["chmod", "+x", "crafter.sh", "startup.sh", "debug.sh","shutdown.sh", "setenv.sh", "init-site.sh"]
            }
        }
        updateCatalinaSettings(authEnv);
        if(includeProfile){
            copy{
                from "./src/profile/server/target/crafter-profile.war"
                into "${authEnv}/bin/apache-tomcat/webapps/"
            }
        }
        if(includeSocial){
            copy{
                from "./src/social/server/target/crafter-social.war"
                into "${authEnv}/bin/apache-tomcat/webapps/"
            }
        }
        updateTomcatPorts("${authEnv}/bin/apache-tomcat/conf/server.xml",authTomcatPort,authTomcatAJPPort,
                authTomcatShutdownPort,authTomcatSSLPort)
        updateTomcatContext("${authEnv}/bin/apache-tomcat/conf/context.xml")
        updateCatalinaLogging("${authEnv}/bin/apache-tomcat/conf/logging.properties")
        addSolrIndexHome("${authEnv}/bin/solr/server/solr/solr.xml")
    }
}

task("deliveyEnviroment"){
    description "Build Crafter environment"

    doLast{
        copy{
            from zipTree(downloadDir + "/apache-tomcat-${tomcatVersion}.zip")
            into "${liveEnv}/bin"
        }
        file("${liveEnv}/bin/apache-tomcat-${tomcatVersion}").renameTo(file("${liveEnv}/bin/apache-tomcat"))

        /** SOLR **/
        copy{
            from zipTree(downloadDir + "/solr-${solrVersion}.zip")
            into "${liveEnv}/bin"
        }
        file("${liveEnv}/bin/solr-${solrVersion}").renameTo(file("${liveEnv}/bin/solr"))

        copy{
            from "./src/search/crafter-search-provider/solr/configsets"
            into "${liveEnv}/bin/solr/server/solr/configsets"
        }
        file("${liveEnv}/data/indexes").mkdirs()
        file("${liveEnv}/data/deployer").mkdirs()
        file("${liveEnv}/data/mongodb").mkdirs()
        /** Remove Non util stuff **/
        def webapps = file("${liveEnv}/bin/apache-tomcat/webapps/")
        webapps.deleteDir()
        webapps.mkdir()

        copy{
            from "./src/search/crafter-search-server/target/crafter-search.war"
            from "./src/engine/target/ROOT.war"
            into "${liveEnv}/bin/apache-tomcat/webapps/"
        }

        copy{
            from "./resources/tomcat-config/"
            into "${liveEnv}/bin/apache-tomcat/shared/classes/"
            filter(ReplaceTokens, tokens: [TOMCAT_HTTP_PORT: String.valueOf(liveTomcatPort),
                                           SOLR_PORT: String.valueOf(solrDevPort),
                                           SOLR_PORT_D: String.valueOf(solrDevDebugPort),
                                           DEPLOYER_D_PORT: String.valueOf(deployerDevDebugPort),
                                           DEPLOYER_PORT: String.valueOf(deployerDevPort),
                                           TOMCAT_DEBUG_PORT:String.valueOf(liveTomcatDebug),
                                           MONGODB_PORT:String.valueOf(liveMongoDBPort)
            ])
        }
        copy{
            from "./resources/tomcat-config-delivery/"
            into "${liveEnv}/bin/apache-tomcat/shared/classes/"
            filter(ReplaceTokens, tokens: [TOMCAT_HTTP_PORT: String.valueOf(liveTomcatPort),
                                           SOLR_PORT: String.valueOf(solrDevPort),
                                           SOLR_PORT_D: String.valueOf(solrDevDebugPort),
                                           DEPLOYER_D_PORT: String.valueOf(deployerDevDebugPort),
                                           DEPLOYER_PORT: String.valueOf(deployerDevPort),
                                           TOMCAT_DEBUG_PORT:String.valueOf(liveTomcatDebug),
                                           MONGODB_PORT:String.valueOf(liveMongoDBPort)
            ])
        }
        copy{
            from "./src/deployer/target/crafter-deployer.jar"
            into "${liveEnv}/bin/crafter-deployer"
        }
        copy{
            from "./resources/deployer/"
            into "${liveEnv}/bin/crafter-deployer"
            filter(ReplaceTokens, tokens: [TOMCAT_HTTP_PORT: String.valueOf(liveTomcatPort),
                                           SOLR_PORT: String.valueOf(solrDevPort),
                                           SOLR_PORT_D: String.valueOf(solrDevDebugPort),
                                           DEPLOYER_D_PORT: String.valueOf(deployerDevDebugPort),
                                           DEPLOYER_PORT: String.valueOf(deployerDevPort),
                                           TOMCAT_DEBUG_PORT: String.valueOf(liveTomcatDebug),
                                           MONGODB_PORT:String.valueOf(liveMongoDBPort)
            ])
        }
        copy {
            from "./src/deployer/README.md"
            into "${liveEnv}/bin/crafter-deployer/"
        }
        copy {
            from "./src/studio/README.md"
            into "${liveEnv}/bin/apache-tomcat"
        }

        copy {
            from "./resources/LICENSE"
            from "./resources/README.txt"
            into "${liveEnv}/"
        }
        copy{
            from "./resources/crafter/"
            into "${liveEnv}/bin/"
            filter(ReplaceTokens, tokens: [TOMCAT_HTTP_PORT: String.valueOf(liveTomcatPort),
                                           SOLR_PORT: String.valueOf(solrDevPort),
                                           SOLR_PORT_D: String.valueOf(solrDevDebugPort),
                                           DEPLOYER_D_PORT: String.valueOf(deployerDevDebugPort),
                                           DEPLOYER_PORT: String.valueOf(deployerDevPort),
                                           DEPLOYMENT_DIR: String.valueOf(deploymentDevDir),
                                           TOMCAT_DEBUG_PORT: String.valueOf(liveTomcatDebug),
                                           MONGODB_PORT:String.valueOf(liveMongoDBPort)
            ])
        }

        if(!isWin){
            exec{
                workingDir "${liveEnv}/bin/apache-tomcat/bin/"
                commandLine commandLinePrefix + ["chmod", "+x", "catalina.sh", "configtest.sh", "daemon.sh", "digest.sh", "setclasspath.sh", "shutdown.sh", "startup.sh", "tool-wrapper.sh", "version.sh"]
            }
            exec{
                workingDir "${liveEnv}/bin/crafter-deployer/"
                commandLine commandLinePrefix + ["chmod", "+x", "deployer.sh"]
            }
            exec{
                workingDir "${liveEnv}/bin"
                commandLine commandLinePrefix + ["chmod", "+x", "crafter.sh","startup.sh","debug.sh","shutdown.sh", "setenv.sh", "init-site.sh"]
            }
        }
        if(includeProfile){
            copy{
                from "./src/profile/server/target/crafter-profile.war"
                into "${liveEnv}/bin/apache-tomcat/webapps/"
            }
        }
        if(includeSocial){
            copy{
                from "./src/social/server/target/crafter-social.war"
                into "${liveEnv}/bin/apache-tomcat/webapps/"
            }
        }
        updateTomcatPorts("${liveEnv}/bin/apache-tomcat/conf/server.xml",liveTomcatPort,liveTomcatAJPPort,
                liveTomcatShutdownPort,liveTomcatSSLPort)
        updateCatalinaSettings(liveEnv)
        updateTomcatContext("${liveEnv}/bin/apache-tomcat/conf/context.xml")
        updateCatalinaLogging("${liveEnv}/bin/apache-tomcat/conf/logging.properties")
        addSolrIndexHome("${liveEnv}/bin/solr/server/solr/solr.xml")

    }
}

def updateTomcatPorts(serverConfigFile,http,ajp,shutdown,ssl){
    def serverConfig=new XmlParser().parse(serverConfigFile)
    serverConfig.@port=shutdown
    serverConfig.Service.Connector.each{
        if(it.@protocol.equalsIgnoreCase("HTTP/1.1")){
            it.@port=http
            it.@redirectPort=ssl
            it.@URIEncoding="UTF-8"
        }else if (it.@protocol.equalsIgnoreCase("AJP/1.3")){
            it.@port=ajp
            it.@redirectPort=ssl
            it.@URIEncoding="UTF-8"
        }
    }
    def printer = new XmlNodePrinter(new PrintWriter(serverConfigFile) )
    printer.preserveWhitespace = true
    printer.print( serverConfig )
}


def updateTomcatContext(serverConfigFile){
    def contextConfig=new XmlParser().parse(serverConfigFile)
    new Node(contextConfig, 'Resources', [cachingAllowed:true, cacheMaxSize:100000])
    def printer = new XmlNodePrinter(new PrintWriter(serverConfigFile) )
    printer.preserveWhitespace = true
    printer.print( contextConfig )
}

def updateCatalinaSettings(env){
    Properties catalinaProperties = new Properties()
    catalinaProperties.load(new FileInputStream("${env}/bin/apache-tomcat/conf/catalina.properties"))
    catalinaProperties.setProperty("shared.loader",
            '${catalina.base}/shared/classes,${catalina.base}/shared/lib/*.jar')
    def output = new FileOutputStream("${env}/bin/apache-tomcat/conf/catalina.properties")
    catalinaProperties.store(output,"")
}

def updateCatalinaLogging(loggingPropertiesFile){
  Properties engineServerProps = new Properties()
  engineServerProps.load(new FileInputStream(loggingPropertiesFile))
  engineServerProps.setProperty("1catalina.org.apache.juli.AsyncFileHandler.directory",'${catalina.logs}')
  engineServerProps.setProperty("2localhost.org.apache.juli.AsyncFileHandler.directory",'${catalina.logs}')
  engineServerProps.setProperty("3manager.org.apache.juli.AsyncFileHandler.directory",'${catalina.logs}')
  engineServerProps.setProperty("4host-manager.org.apache.juli.AsyncFileHandler.directory",'${catalina.logs}')
  def output = new FileOutputStream(loggingPropertiesFile)
  engineServerProps.store(output,"")
}

def addSolrIndexHome(solrServerConfig){
    def contextConfig=new XmlParser().parse(solrServerConfig)
    def node=new Node(contextConfig, 'str', [name:"coreRootDirectory"])
    node.setValue("\${crafter.solr.index:data/indexes}")
    def printer = new XmlNodePrinter(new PrintWriter(solrServerConfig) )
    printer.preserveWhitespace = true
    printer.print( contextConfig )
}
