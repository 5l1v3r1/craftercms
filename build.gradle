plugins {
    id "de.undercouch.download" version "3.1.2"
}

def isWin=System.getProperty('os.name').toLowerCase().contains('windows')
def isOSX=System.getProperty('os.name').toLowerCase().contains('mac')
def isNix=(System.getProperty('os.name').toLowerCase().contains('nix') || System.getProperty('os.name').toLowerCase().contains('aix') || System.getProperty('os.name').toLowerCase().contains('nux'))

def commandLinePrefix = []
if(isWin){
    commandLinePrefix =["cmd","/c"]
}

def getModule(){
    if(project.hasProperty("moduleName")){
        def moduleName=project.property("moduleName")
        moduleName=moduleName.trim().toLowerCase()
        return moduleName.trim().isEmpty()?"all":moduleName
    }else{
        return "all"
    }
}

def getEnv(){
    if(project.hasProperty("env")){
        def enviromentName=project.property("env")
        enviromentName=enviromentName.trim().toLowerCase()
        return enviromentName.trim().isEmpty()?"all":enviromentName
    }else{
        return "all"
    }
}

def isAllEnvs(){
    return getEnv().equalsIgnoreCase("all")
}

ext {

    tomcatVersion= System.getProperty("tomcatVersion")?:"8.5.6"
    solrVersion=System.getProperty("solrVersion")?:"6.4.1"
    downloadDir=System.getProperty("downloadDir")?:"./downloads/"
    authEnv=System.getProperty("authEnv")?:"./crafter-auth-env/"
    liveEnv=System.getProperty("liveEnv")?:"./crafter-delivery-env/"
    includeProfile=System.getProperty("includeProfile")?:false
    includeSocial=System.getProperty("includeSocial")?:false
    gitURLTemplate=System.getProperty("gitUrl")?:"https://github.com/craftercms/"
    gitRepo=System.getProperty("gitRepo")?:"origin"
    sourceBranch=System.getProperty("gitBranch")?:"master"

    /** Tomcat env **/
    authTomcatPort=System.getProperty("liveTomcatPort")?:8080
    authTomcatShutdownPort=System.getProperty("liveTomcatShutdownPort")?:8005
    authTomcatAJPPort=System.getProperty("liveTomcatAJPPort")?:8009
    authTomcatSSLPort=System.getProperty("liveTomcatSSLPort")?:8443

    /** Tomcat Live **/
    liveTomcatPort=System.getProperty("liveTomcatPort")?:9080
    liveTomcatShutdownPort=System.getProperty("liveTomcatShutdownPort")?:9005
    liveTomcatAJPPort=System.getProperty("liveTomcatAJPPort")?:9009
    liveTomcatSSLPort=System.getProperty("liveTomcatSSLPort")?:9443

    /** Social Need Profile **/
    if(includeSocial){
        includeProfile=true
    }
    VALID_MODULES=["commons","core","search","profile","engine","deployer","studio","social"]
    VALID_DEPLOYABLE_MODULES=[
                   "search":"./src/search/crafter-search-server/target/crafter-search.war",
                   "profile":"./src/profile/server/target/crafter-profile.war",
                   "engine":"./src/engine/target/ROOT.war",
                   "deployer":"./src/deployer/target/crafter-deployer.jar",
                   "studio":"./src/studio/target/studio.war",
                   "social":"./src/social/server/target/crafter-social.war"]

}

apply from:"downloads.gradle"
apply from:"environments.gradle"

task("init"){
    description "Clones Crafter CMS stack"

    doFirst{
        def module = getModule();
    }

    doLast {

        if (module.equals("all")) {
            VALID_MODULES.each {
                cloneModule(commandLinePrefix, it).execute()
            }
        } else if (VALID_MODULES.contains(module)) {
            cloneModule(commandLinePrefix, module).execute()
        } else {
            throw new InvalidUserDataException("${module} is not a valid, use ${VALID_MODULES}")
        }
    }

}

task("update"){
    description "Update Crafter CMS stack"
    doFirst{
        def module = getModule();
    }
    doLast {

        if (module.equals("all")) {
            VALID_MODULES.each {
                updateModule(commandLinePrefix, it).execute()
            }
        } else if (VALID_MODULES.contains(module)) {
            updateModule(commandLinePrefix, module).execute()
        } else {
            throw new InvalidUserDataException("${module} is not a valid, use ${VALID_MODULES}")
        }
    }
}

task("start"){
    doLast{
        def env = getEnv()
        switch (env){
            case "all":
                if(!file(authEnv).exists() || !file(liveEnv).exists()){
                    throw new InvalidUserDataException("Either of Authoring or Delivery Enviroments are not deploy. Please run deploy before start")
                }
                startAuth(commandLinePrefix).execute()
                startDelivery(commandLinePrefix).execute()
            case "authoring":
                if(!file(authEnv).exists()){
                    throw new InvalidUserDataException("Authoring  Enviroment is not deploy. Please run deploy -Penv=authoring before start")
                }
                startAuth(commandLinePrefix).execute()
                break
            case "delivery":
                if(!file(liveEnv).exists()){
                    throw new InvalidUserDataException("Authoring  Enviroment is not deploy. Please run deploy -Penv=authoring before start")
                }
                startDelivery(commandLinePrefix).execute()
                break
            default:
                throw new InvalidUserDataException("${env} is not a valid environment, use Authoring or Delivery")
        }
    }
}

task("stop"){
    doLast{
        def env = getEnv()
        switch (env){
            case "all":
                if(!file(authEnv).exists() || !file(liveEnv).exists()){
                    throw new InvalidUserDataException("Either of Authoring or Delivery Enviroments are not deploy. Please run deploy before stop")
                }
                stopAuth(commandLinePrefix).execute()
                stopDevlivery(commandLinePrefix).execute()
            case "authoring":
                if(!file(authEnv).exists()){
                    throw new InvalidUserDataException("Authoring  Enviroment is not deploy. Please run deploy -Penv=authoring before stop")
                }
                stopAuth(commandLinePrefix).execute()
                break
            case "delivery":
                if(!file(liveEnv).exists()){
                    throw new InvalidUserDataException("Authoring  Enviroment is not deploy. Please run deploy -Penv=authoring before stop")
                }
                stopDevlivery(commandLinePrefix).execute()
                break
            default:
                throw new InvalidUserDataException("${env} is not a valid environment, use Authoring or Delivery")
        }
    }
}

task("clean"){
    description "Clean Crafter CMS stack"

    doFirst {
        def module=getModule();
    }

    doLast {
        if (module.equals("all")) {
            VALID_MODULES.each {
                cleanModule(commandLinePrefix, it).execute()
            }
        } else if (VALID_MODULES.contains(module)) {
            cleanModule(commandLinePrefix, module).execute()
        } else {
            throw new InvalidUserDataException("${module} is not a valid, use ${VALID_MODULES}")
        }
    }
}

task("build"){
    description "Builds Crafter CMS stack"

    doFirst{
        def module = getModule();
    }

    doLast {

        if (module.equals("all")) {
            VALID_MODULES.each {
                buildModule(commandLinePrefix, it).execute()
            }
        } else if (VALID_MODULES.contains(module)) {
            buildModule(commandLinePrefix, module).execute()
        } else {
            throw new InvalidUserDataException("${module} is not a valid, use ${VALID_MODULES}")
        }
    }
}

task("deploy") {
    description "Clean Crafter CMS stack"

    doFirst {
        def module = getModule()
        def env = getEnv()
        switch (env){
            case "all":
                checkEnvWD(authEnv,"authoring")
                checkEnvWD(liveEnv,"delivery")
                break
            case "authoring":
                checkEnvWD(authEnv,env)
                break
            case "delivery":
                checkEnvWD(liveEnv,env)
                break
            default:
                throw new InvalidUserDataException("${env} is not a valid environment, use Authoring or Delivery")
        }
    }

    doLast {
        if (module.equals("all")) {
            VALID_DEPLOYABLE_MODULES.keySet().each {
                if(isAllEnvs()){
                    deployModule(commandLinePrefix, it,"authoring").execute()
                    deployModule(commandLinePrefix, it,"delivery").execute()
                }else{
                    deployModule(commandLinePrefix, it,env).execute()
                }
                file(VALID_DEPLOYABLE_MODULES[it]).delete()
            }
        } else if (VALID_DEPLOYABLE_MODULES.containsKey(module)) {
            if(isAllEnvs()){
                deployModule(commandLinePrefix, module,"authoring").execute()
                deployModule(commandLinePrefix, module,"delivery").execute()
            }else{
                deployModule(commandLinePrefix, module,env).execute()
            }
            file(VALID_DEPLOYABLE_MODULES[module]).delete()
        } else {
            throw new InvalidUserDataException("${module} is not a valid module, use ${VALID_DEPLOYABLE_MODULES.keySet()}")
        }
    }
}

task("bundle"){
    doLast {
        def env = getEnv()
        switch (env) {
            case "all":
                pack(authEnv, "authoring")
                pack(liveEnv, "delivery")
                break
            case "authoring":
                pack(authEnv, "authoring")
                break
            case "delivery":
                pack(liveEnv, "delivery")
                break
            default:
                throw new InvalidUserDataException("${env} is not a valid environment, use Authoring or Delivery")
        }
    }
}

def cleanModule(commandLinePrefix,module){
    def ctask=tasks.findByPath("clean${module}")
    if (ctask!= null){
        return ctask
    }else {
        return tasks.create("clean${module}") {
            executeProcess(commandLinePrefix +  commandLinePrefix + ["mvn", "clean"],"./src/${module}".toString())
          }
    }
}

def updateModule(commandLinePrefix,module){
    def btask=tasks.findByPath("update${module}")
    if (btask!= null){
        return btask
    }else {
        return tasks.create("update${module}") {
            if(!file("./src/${module}").exists()) {
                throw new InvalidUserDataException("Module ${module} is not created. Please use init to create it")
            }else {
                def arry = commandLinePrefix + ["git", "pull", gitRepo, sourceBranch]
                executeProcess(arry,"./src/${module}".toString())
            }
        }
    }
}

def cloneModule(commandLinePrefix,module){
    def btask=tasks.findByPath("clone${module}")
    if (btask!= null){
        return btask
    }else {
        return tasks.create("clone${module}") {
            def finalUrl="${gitURLTemplate}${module}.git".toString()
            def path="src/${module}".toString()
            def arry = commandLinePrefix + ["git","clone",finalUrl,path]
            if(file(path).exists()) {
                throw new InvalidUserDataException("Module ${module} was already init, use clone to update it ")
            }else {
                executeProcess(arry,".")
            }
        }
    }
}

//TODO Windowsfy this
def startAuth(commandLinePrefix){
    def btask=tasks.findByPath("startAuth")
    if (btask!= null){
        return btask
    }else {
        tasks.create("startAuth") {
            executeProcess(commandLinePrefix + ["./startup.sh"],authEnv)
        }
    }
}

//TODO Windowsfy this
def startDelivery(commandLinePrefix){
    def btask=tasks.findByPath("startDelivery")
    if (btask!= null){
        return btask
    }else {
        tasks.create("startDelivery") {
            executeProcess(commandLinePrefix + ["./startup.sh"],liveEnv)
        }
    }
}

//TODO Windowsfy this
def stopAuth(commandLinePrefix){
    def btask=tasks.findByPath("stopAuth")
    if (btask!= null){
        return btask
    }else {
        tasks.create("stopAuth"){
            executeProcess(commandLinePrefix + ["./shutdown.sh"],authEnv)
        }
    }
}

//TODO Windowsfy this
def stopDevlivery(commandLinePrefix){
    def btask=tasks.findByPath("stopDelivery")
    if (btask!= null){
        return btask
    }else {
        tasks.create("stopDelivery") {
            executeProcess(commandLinePrefix + ["./shutdown.sh"],liveEnv)
        }
    }
}

def buildModule(commandLinePrefix,module){
    def btask=tasks.findByPath("build${module}")
    if (btask!= null){
        return btask
    }else {
        return tasks.create("build${module}") {
            def commandLinePost=[]
            if(!project.hasProperty("test")){
                commandLinePost.add("-Dmaven.test.skip=true")
            }
            def array=commandLinePrefix +  commandLinePrefix + ["mvn", "clean", "install"] + commandLinePost
            executeProcess(array,"./src/${module}".toString())
        }
    }
}

def deployModule(commandLinePrefix,module,env){
    def dtask=tasks.findByPath("deploy${module}")
    if (dtask!= null){
        return dtask
    }else {
        return tasks.create("deploy${module}") {
            println "Deploy ${module} to ${env}"
            if (module.equals("studio") && env.equals("delivery")) {
                throw new InvalidUserDataException("Module Studio can not be deploy in Delivery")
            }
            def deployable = file(VALID_DEPLOYABLE_MODULES[module])
            if (deployable.exists()) {
                def path = env.equals("authoring") ? authEnv : liveEnv
                path += deployable.absolutePath.endsWith(".jar") ? "crafter-deployer/" : "apache-tomcat/webapps/"
                path += deployable.name
                delete {
                    delete path
                    delete path.take(path.lastIndexOf('.'))
                }
                copy {
                    from VALID_DEPLOYABLE_MODULES[module]
                    into path.take(path.lastIndexOf('/'))
                }

            } else {
               println "WARN: You haven't build ${module} module"
            }
        }
    }
}

def checkEnvWD(path,env){
    def ddir=file(path)
    if(!ddir.exists()) {
        ddir.mkdir()
        def deployerDir = file("${path}/crafter-deployer")
        deployerDir.mkdir()
        downloadTomcat.execute()
        downloadSolr.execute()
        if(env.equals("authoring")){
            authoringEnvirment.execute()
        }else if (env.equals("delivery")){
            deliveyEnviroment.execute()
        }
    }
}

def pack(environmentPath,envName){
    def dtask=tasks.findByPath("tar${envName}")
    if (dtask!= null){
        return dtask
    }else {
        def zipTask = tasks.findByPath("zip${envName}")
        if (zipTask != null) {
            zipTask.execute()
        } else {
            tasks.create("zip${envName}", Zip.class) {
                from(environmentPath) {
                    into("crafter")
                }
                archiveName "crafter-${envName}-cms.zip"
                fileMode null
                dirMode null
                includeEmptyDirs true
                metadataCharset "UTF-8"
                caseSensitive false
                destinationDir(file("bundles/"))
            }.execute()
        }

        def tarTask = tasks.findByPath("tar${envName}")
        if (tarTask != null) {
            tarTask.execute()
        } else {
            tasks.create("tar${envName}", Tar.class) {
                from(environmentPath) {
                    into("crafter")
                }
                archiveName "crafter-${envName}-cms.tar.gz"
                fileMode null
                dirMode null
                includeEmptyDirs true
                caseSensitive false
                compression = Compression.GZIP
                destinationDir(file("bundles/"))
            }.execute()
        }
    }
}

def executeProcess(command,workingDir){
    ProcessBuilder pb = new ProcessBuilder(command)
    pb.directory(new File(workingDir))
    pb.redirectErrorStream(true)
    Process proc = pb.start();
    proc.inputStream.eachLine {println it}
}