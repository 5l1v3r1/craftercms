
import java.security.MessageDigest;

task downloadTomcat() {
    description = "Downloads and checks tomcat integrity"
    doFirst{
        download {
            src "http://archive.apache.org/dist/tomcat/tomcat-8/v${tomcatVersion}/bin/apache-tomcat-${tomcatVersion}.zip"
            overwrite false
            dest file("${downloadDir}/apache-tomcat-${tomcatVersion}.zip")
        }
        download {
            src "http://archive.apache.org/dist/tomcat/tomcat-8/v${tomcatVersion}/bin/apache-tomcat-${tomcatVersion}.zip.sha1"
            dest file("${downloadDir}/apache-tomcat-${tomcatVersion}.zip.sha1")
            overwrite false
        }
    }
    doLast{
        assert sha1(new File(downloadDir, "apache-tomcat-${tomcatVersion}.zip")) ==  new File(downloadDir, "apache-tomcat-${tomcatVersion}.zip.sha1").getText('UTF-8').split(" ")[0]
    }
}
/** Dowloads any external Resources **/
task downloadSolr() {
    description = "Unzip Solr and Solr's war (from Maven central) signature"
    doFirst{
        download {
            src "http://archive.apache.org/dist/lucene/solr/${solrVersion}/solr-${solrVersion}.zip"
            overwrite false
            dest file("${downloadDir}/solr-${solrVersion}.zip")
        }
        download {
            //           http://archive.apache.org/dist/lucene/solr/6.4.1/solr-6.4.1.zip.sha1
            src "http://archive.apache.org/dist/lucene/solr/${solrVersion}/solr-${solrVersion}.zip.sha1"
            dest file("${downloadDir}/solr-${solrVersion}.zip.sha1")
            overwrite false
        }
    }
    doLast{
        assert sha1(new File(downloadDir, "solr-${solrVersion}.zip")) == new File(downloadDir, "solr-${solrVersion}.zip.sha1").getText('UTF-8').split(" ")[0]
    }
}


task downloadEdgeDriver(){
    doFirst{
        file("./src/test-suite/bin/edge/").mkdir()
        download{
            src "https://download.microsoft.com/download/3/4/2/342316D7-EBE0-4F10-ABA2-AE8E0CDF36DD/MicrosoftWebDriver.exe"
            overwrite false
            dest ("./src/test-suite/bin/edge/MicrosoftWebDriver.exe")
        }
    }
}

task downloadChromeDriver(){
    doFirst{
        def platform=""
        switch (testingPlatform){
            case "windows":
                platform="win32"
                break;
            case "linux":
                platform="linux64"
                break;
            default:
                platform="mac64"

        }
        download{
            src "https://chromedriver.storage.googleapis.com/${chromeDriverVersion}/chromedriver_${platform}.zip"
            overwrite false
            dest ("./src/test-suite/bin/chromedriver-${testingPlatform}.zip")
        }
        copy {
            from zipTree("./src/test-suite/bin/chromedriver-${testingPlatform}.zip")
            into "./src/test-suite/bin/${browserToTest}-${testingPlatform}/"
        }
    }
}

def sha1(file){
    MessageDigest md = MessageDigest.getInstance("SHA1");
    FileInputStream fis = new FileInputStream(file.path);
    byte[] dataBytes = new byte[1024];
    int nread = 0;
    while ((nread = fis.read(dataBytes)) != -1) {
        md.update(dataBytes, 0, nread);
    };
    byte[] mdbytes = md.digest();
    //convert the byte to hex format
    StringBuffer sb = new StringBuffer("");
    for (int i = 0; i < mdbytes.length; i++) {
        sb.append(Integer.toString((mdbytes[i] & 0xff) + 0x100, 16).substring(1));
    }
    return sb.toString()
}
